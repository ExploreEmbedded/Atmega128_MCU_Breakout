
blinky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000a0  00000000  00000000  000008f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000051c  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001e7  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004bd  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000133  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000048  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:

int main(void)
{
	//let's set all ports as output
	
	DDRA = DDRB =DDRC =DDRD = DDRD =DDRE = DDRF = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	80 93 61 00 	sts	0x0061, r24
  d4:	82 b9       	out	0x02, r24	; 2
  d6:	81 bb       	out	0x11, r24	; 17
  d8:	81 bb       	out	0x11, r24	; 17
  da:	84 bb       	out	0x14, r24	; 20
  dc:	87 bb       	out	0x17, r24	; 23
  de:	8a bb       	out	0x1a, r24	; 26
    while(1)
    {
		//here goes the blinky
	   PORTA =  PORTB = PORTC = PORTD = PORTE= PORTF = 0xFF; //turn them  all on!
  e0:	e2 e6       	ldi	r30, 0x62	; 98
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 83       	st	Z, r24
  e6:	83 b9       	out	0x03, r24	; 3
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	88 bb       	out	0x18, r24	; 24
  ee:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	31 ee       	ldi	r19, 0xE1	; 225
  f4:	44 e0       	ldi	r20, 0x04	; 4
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x28>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x32>
 100:	00 00       	nop
	   DELAY_ms(100);
	   PORTA =  PORTB = PORTC = PORTD = PORTE= PORTF = 0x00; //turn them  all OFF!
 102:	10 82       	st	Z, r1
 104:	13 b8       	out	0x03, r1	; 3
 106:	12 ba       	out	0x12, r1	; 18
 108:	15 ba       	out	0x15, r1	; 21
 10a:	18 ba       	out	0x18, r1	; 24
 10c:	1b ba       	out	0x1b, r1	; 27
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	31 ee       	ldi	r19, 0xE1	; 225
 112:	44 e0       	ldi	r20, 0x04	; 4
 114:	21 50       	subi	r18, 0x01	; 1
 116:	30 40       	sbci	r19, 0x00	; 0
 118:	40 40       	sbci	r20, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x46>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x50>
 11e:	00 00       	nop
 120:	e1 cf       	rjmp	.-62     	; 0xe4 <main+0x16>

00000122 <DELAY_sec>:
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	59 f0       	breq	.+22     	; 0x13c <DELAY_sec+0x1a>
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	33 ed       	ldi	r19, 0xD3	; 211
 12a:	40 e3       	ldi	r20, 0x30	; 48
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	30 40       	sbci	r19, 0x00	; 0
 130:	40 40       	sbci	r20, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <DELAY_sec+0xa>
 134:	00 c0       	rjmp	.+0      	; 0x136 <DELAY_sec+0x14>
 136:	00 00       	nop
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
 138:	01 97       	sbiw	r24, 0x01	; 1
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
 13a:	a9 f7       	brne	.-22     	; 0x126 <DELAY_sec+0x4>
 13c:	08 95       	ret

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
