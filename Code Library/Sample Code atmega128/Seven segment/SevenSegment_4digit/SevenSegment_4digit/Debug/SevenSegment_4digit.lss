
SevenSegment_4digit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000014c  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000918  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ca  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000021d  00000000  00000000  00000f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000474  00000000  00000000  0000119f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000187  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000017e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 75 00 	call	0xea	; 0xea <main>
  c6:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <DELAY_sec>:
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	59 f0       	breq	.+22     	; 0xe8 <DELAY_sec+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	33 ed       	ldi	r19, 0xD3	; 211
  d6:	40 e3       	ldi	r20, 0x30	; 48
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	40 40       	sbci	r20, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <DELAY_sec+0xa>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <DELAY_sec+0x14>
  e2:	00 00       	nop
	  {
	     DELAY_ms(1000);	      /* DELAY_ms is called to generate 1sec delay */
		 var_delaySecCount_u16--;
  e4:	01 97       	sbiw	r24, 0x01	; 1
      It generates a delay of 1sec for each count,
      if 10 is passed as the argument then it generates delay of 10sec
***************************************************************************************************/
void DELAY_sec(uint16_t var_delaySecCount_u16)
 {
	 while(var_delaySecCount_u16!=0)
  e6:	a9 f7       	brne	.-22     	; 0xd2 <DELAY_sec+0x4>
  e8:	08 95       	ret

000000ea <main>:

int main(void)
{
	char key;
	uint8_t option;
	DDRA = DDRC = 0XFF; //Set the ports as output
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	84 bb       	out	0x14, r24	; 20
  ee:	8a bb       	out	0x1a, r24	; 26
	
	while(1)
	{
		
		SegmentSlection=SegOne;
  f0:	61 e0       	ldi	r22, 0x01	; 1
		SegmentValue = seg_code[0];
  f2:	e0 e0       	ldi	r30, 0x00	; 0
  f4:	f1 e0       	ldi	r31, 0x01	; 1
		DELAY_us(10);
		SegmentSlection=SegTwo;
  f6:	52 e0       	ldi	r21, 0x02	; 2
		SegmentValue = seg_code[1];
  f8:	8f 01       	movw	r16, r30
  fa:	0f 5f       	subi	r16, 0xFF	; 255
  fc:	1f 4f       	sbci	r17, 0xFF	; 255
		DELAY_us(10);
		SegmentSlection=SegThree;
  fe:	44 e0       	ldi	r20, 0x04	; 4
		SegmentValue = seg_code[2];
 100:	ef 01       	movw	r28, r30
 102:	22 96       	adiw	r28, 0x02	; 2
		DELAY_us(10);
		SegmentSlection=SegFour;
 104:	38 e0       	ldi	r19, 0x08	; 8
		SegmentValue = seg_code[3];
 106:	cf 01       	movw	r24, r30
 108:	03 96       	adiw	r24, 0x03	; 3
	DDRA = DDRC = 0XFF; //Set the ports as output
	
	while(1)
	{
		
		SegmentSlection=SegOne;
 10a:	65 bb       	out	0x15, r22	; 21
		SegmentValue = seg_code[0];
 10c:	20 81       	ld	r18, Z
 10e:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	25 e3       	ldi	r18, 0x35	; 53
 112:	2a 95       	dec	r18
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x28>
 116:	00 00       	nop
		DELAY_us(10);
		SegmentSlection=SegTwo;
 118:	55 bb       	out	0x15, r21	; 21
		SegmentValue = seg_code[1];
 11a:	d8 01       	movw	r26, r16
 11c:	2c 91       	ld	r18, X
 11e:	2b bb       	out	0x1b, r18	; 27
 120:	b5 e3       	ldi	r27, 0x35	; 53
 122:	ba 95       	dec	r27
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x38>
 126:	00 00       	nop
		DELAY_us(10);
		SegmentSlection=SegThree;
 128:	45 bb       	out	0x15, r20	; 21
		SegmentValue = seg_code[2];
 12a:	28 81       	ld	r18, Y
 12c:	2b bb       	out	0x1b, r18	; 27
 12e:	25 e3       	ldi	r18, 0x35	; 53
 130:	2a 95       	dec	r18
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x46>
 134:	00 00       	nop
		DELAY_us(10);
		SegmentSlection=SegFour;
 136:	35 bb       	out	0x15, r19	; 21
		SegmentValue = seg_code[3];
 138:	dc 01       	movw	r26, r24
 13a:	2c 91       	ld	r18, X
 13c:	2b bb       	out	0x1b, r18	; 27
 13e:	b5 e3       	ldi	r27, 0x35	; 53
 140:	ba 95       	dec	r27
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x56>
 144:	00 00       	nop
 146:	e1 cf       	rjmp	.-62     	; 0x10a <main+0x20>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
