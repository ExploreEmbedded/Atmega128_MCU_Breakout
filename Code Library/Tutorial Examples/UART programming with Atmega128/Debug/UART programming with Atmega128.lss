
UART programming with Atmega128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000006d4  00000748  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075c  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000302  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000552  00000000  00000000  000012c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f9  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f1b  00000000  00000000  00001d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	84 d2       	rcall	.+1288   	; 0x5bc <main>
  b4:	0d c3       	rjmp	.+1562   	; 0x6d0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <UART_SetBaudRate>:
            len--;    //If backspace is pressed then decrement the index to remove the old char
        }
        else
        {
            ptr_string[len]=ch; //copy the char into string and increment the index
            len++;
  b8:	cf 92       	push	r12
  ba:	df 92       	push	r13
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
  c4:	db 01       	movw	r26, r22
  c6:	ca 01       	movw	r24, r20
  c8:	80 56       	subi	r24, 0x60	; 96
  ca:	99 40       	sbci	r25, 0x09	; 9
  cc:	a1 09       	sbc	r26, r1
  ce:	b1 09       	sbc	r27, r1
  d0:	81 3a       	cpi	r24, 0xA1	; 161
  d2:	98 4b       	sbci	r25, 0xB8	; 184
  d4:	a1 40       	sbci	r26, 0x01	; 1
  d6:	b1 05       	cpc	r27, r1
  d8:	88 f4       	brcc	.+34     	; 0xfc <UART_SetBaudRate+0x44>
  da:	a8 ef       	ldi	r26, 0xF8	; 248
  dc:	bf ef       	ldi	r27, 0xFF	; 255
  de:	9a 01       	movw	r18, r20
  e0:	ab 01       	movw	r20, r22
  e2:	d9 d2       	rcall	.+1458   	; 0x696 <__mulohisi3>
  e4:	7c 5d       	subi	r23, 0xDC	; 220
  e6:	8b 40       	sbci	r24, 0x0B	; 11
  e8:	9f 4f       	sbci	r25, 0xFF	; 255
  ea:	e4 e0       	ldi	r30, 0x04	; 4
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	44 1f       	adc	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	ea 95       	dec	r30
  f6:	d1 f7       	brne	.-12     	; 0xec <UART_SetBaudRate+0x34>
  f8:	aa d2       	rcall	.+1364   	; 0x64e <__udivmodsi4>
  fa:	02 c0       	rjmp	.+4      	; 0x100 <UART_SetBaudRate+0x48>
  fc:	27 e6       	ldi	r18, 0x67	; 103
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	c1 11       	cpse	r28, r1
 102:	04 c0       	rjmp	.+8      	; 0x10c <UART_SetBaudRate+0x54>
 104:	29 b9       	out	0x09, r18	; 9
 106:	30 93 90 00 	sts	0x0090, r19
 10a:	06 c0       	rjmp	.+12     	; 0x118 <UART_SetBaudRate+0x60>
 10c:	c1 30       	cpi	r28, 0x01	; 1
 10e:	21 f4       	brne	.+8      	; 0x118 <UART_SetBaudRate+0x60>
 110:	20 93 99 00 	sts	0x0099, r18
 114:	30 93 98 00 	sts	0x0098, r19
 118:	cf 91       	pop	r28
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	df 90       	pop	r13
 120:	cf 90       	pop	r12
 122:	08 95       	ret

00000124 <UART_Init>:
 124:	81 11       	cpse	r24, r1
 126:	08 c0       	rjmp	.+16     	; 0x138 <UART_Init+0x14>
 128:	88 e1       	ldi	r24, 0x18	; 24
 12a:	8a b9       	out	0x0a, r24	; 10
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	80 93 95 00 	sts	0x0095, r24
 132:	1b b8       	out	0x0b, r1	; 11
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0b c0       	rjmp	.+22     	; 0x14e <UART_Init+0x2a>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	51 f4       	brne	.+20     	; 0x150 <UART_Init+0x2c>
 13c:	88 e1       	ldi	r24, 0x18	; 24
 13e:	80 93 9a 00 	sts	0x009A, r24
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	80 93 9d 00 	sts	0x009D, r24
 148:	10 92 9b 00 	sts	0x009B, r1
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	b4 cf       	rjmp	.-152    	; 0xb8 <UART_SetBaudRate>
 150:	08 95       	ret

00000152 <UART_TxChar>:
 152:	81 11       	cpse	r24, r1
 154:	04 c0       	rjmp	.+8      	; 0x15e <UART_TxChar+0xc>
 156:	5d 9b       	sbis	0x0b, 5	; 11
 158:	fe cf       	rjmp	.-4      	; 0x156 <UART_TxChar+0x4>
 15a:	6c b9       	out	0x0c, r22	; 12
 15c:	08 95       	ret
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	31 f4       	brne	.+12     	; 0x16e <UART_TxChar+0x1c>
 162:	80 91 9b 00 	lds	r24, 0x009B
 166:	85 ff       	sbrs	r24, 5
 168:	fc cf       	rjmp	.-8      	; 0x162 <UART_TxChar+0x10>
 16a:	60 93 9c 00 	sts	0x009C, r22
 16e:	08 95       	ret

00000170 <UART_TxNumber.part.2>:
 170:	8f 92       	push	r8
 172:	9f 92       	push	r9
 174:	af 92       	push	r10
 176:	bf 92       	push	r11
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	e8 2e       	mov	r14, r24
 186:	4a 01       	movw	r8, r20
 188:	5b 01       	movw	r10, r22
 18a:	f2 2e       	mov	r15, r18
 18c:	c1 e0       	ldi	r28, 0x01	; 1
 18e:	d0 e0       	ldi	r29, 0x00	; 0
 190:	ff 20       	and	r15, r15
 192:	d9 f0       	breq	.+54     	; 0x1ca <UART_TxNumber.part.2+0x5a>
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	8f 0d       	add	r24, r15
 198:	8e 01       	movw	r16, r28
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <UART_TxNumber.part.2+0x30>
 19c:	00 0f       	add	r16, r16
 19e:	11 1f       	adc	r17, r17
 1a0:	8a 95       	dec	r24
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <UART_TxNumber.part.2+0x2c>
 1a4:	01 2e       	mov	r0, r17
 1a6:	00 0c       	add	r0, r0
 1a8:	22 0b       	sbc	r18, r18
 1aa:	33 0b       	sbc	r19, r19
 1ac:	08 21       	and	r16, r8
 1ae:	19 21       	and	r17, r9
 1b0:	2a 21       	and	r18, r10
 1b2:	3b 21       	and	r19, r11
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	01 2b       	or	r16, r17
 1b8:	02 2b       	or	r16, r18
 1ba:	03 2b       	or	r16, r19
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <UART_TxNumber.part.2+0x50>
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	60 5d       	subi	r22, 0xD0	; 208
 1c2:	8e 2d       	mov	r24, r14
 1c4:	c6 df       	rcall	.-116    	; 0x152 <UART_TxChar>
 1c6:	fa 94       	dec	r15
 1c8:	e3 cf       	rjmp	.-58     	; 0x190 <UART_TxNumber.part.2+0x20>
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	bf 90       	pop	r11
 1d8:	af 90       	pop	r10
 1da:	9f 90       	pop	r9
 1dc:	8f 90       	pop	r8
 1de:	08 95       	ret

000001e0 <UART_TxString>:
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	18 2f       	mov	r17, r24
 1e8:	eb 01       	movw	r28, r22
 1ea:	69 91       	ld	r22, Y+
 1ec:	66 23       	and	r22, r22
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <UART_TxString+0x16>
 1f0:	81 2f       	mov	r24, r17
 1f2:	af df       	rcall	.-162    	; 0x152 <UART_TxChar>
 1f4:	fa cf       	rjmp	.-12     	; 0x1ea <UART_TxString+0xa>
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	1f 91       	pop	r17
 1fc:	08 95       	ret

000001fe <UART_TxNumber>:
                8.(0x12AB,6) then 6-digits ie. 0012AB will be transmitted
                9.(0x12AB,C_DefaultDigitsToTransmit_U8) then 12AB will be transmitted.    
 ***************************************************************************************************/
#if ((Enable_UART_TxNumber==1) || (Enable_UART_TxFloatNumber==1) || (Enable_UART_Printf == 1))
void UART_TxNumber(uint8_t v_uartChannel_u8, uint8_t v_numericSystem_u8, uint32_t v_number_u32, uint8_t v_numOfDigitsToTransmit_u8)
{
 1fe:	4f 92       	push	r4
 200:	5f 92       	push	r5
 202:	6f 92       	push	r6
 204:	7f 92       	push	r7
 206:	af 92       	push	r10
 208:	bf 92       	push	r11
 20a:	cf 92       	push	r12
 20c:	df 92       	push	r13
 20e:	ef 92       	push	r14
 210:	ff 92       	push	r15
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	2a 97       	sbiw	r28, 0x0a	; 10
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
 22a:	b8 2e       	mov	r11, r24
 22c:	a6 2e       	mov	r10, r22
 22e:	ba 01       	movw	r22, r20
 230:	a9 01       	movw	r20, r18
    uint8_t i=0,a[10];

    if(C_BINARY_U8 == v_numericSystem_u8)
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	a8 12       	cpse	r10, r24
 236:	17 c0       	rjmp	.+46     	; 0x266 <UART_TxNumber+0x68>
 238:	20 2f       	mov	r18, r16
 23a:	8b 2d       	mov	r24, r11
            i--;
        }
    }


}
 23c:	2a 96       	adiw	r28, 0x0a	; 10
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	df 90       	pop	r13
 256:	cf 90       	pop	r12
 258:	bf 90       	pop	r11
 25a:	af 90       	pop	r10
 25c:	7f 90       	pop	r7
 25e:	6f 90       	pop	r6
 260:	5f 90       	pop	r5
 262:	4f 90       	pop	r4
 264:	85 cf       	rjmp	.-246    	; 0x170 <UART_TxNumber.part.2>
            i = util_GetBitStatus(v_number_u32,(v_numOfDigitsToTransmit_u8-1));
            UART_TxChar(v_uartChannel_u8,util_Dec2Ascii(i));
            v_numOfDigitsToTransmit_u8--;
        }    
    }     
    else if(v_number_u32==0)
 266:	41 15       	cp	r20, r1
 268:	51 05       	cpc	r21, r1
 26a:	61 05       	cpc	r22, r1
 26c:	71 05       	cpc	r23, r1
 26e:	49 f0       	breq	.+18     	; 0x282 <UART_TxNumber+0x84>
 270:	fe 01       	movw	r30, r28
 272:	31 96       	adiw	r30, 0x01	; 1
 274:	6f 01       	movw	r12, r30
 276:	7f 01       	movw	r14, r30
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 278:	4a 2c       	mov	r4, r10
 27a:	51 2c       	mov	r5, r1
 27c:	61 2c       	mov	r6, r1
 27e:	71 2c       	mov	r7, r1
 280:	2c c0       	rjmp	.+88     	; 0x2da <UART_TxNumber+0xdc>
    else if(v_number_u32==0)
    {
        /* If the number is zero then Transmit Specified number of zeros*/
        /*TODO: trsnamit single zero or multiple, Currently single zero is transmitted*/
        // for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
        UART_TxChar(v_uartChannel_u8,'0');
 282:	60 e3       	ldi	r22, 0x30	; 48
 284:	8b 2d       	mov	r24, r11
            i--;
        }
    }


}
 286:	2a 96       	adiw	r28, 0x0a	; 10
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	de bf       	out	0x3e, r29	; 62
 28e:	0f be       	out	0x3f, r0	; 63
 290:	cd bf       	out	0x3d, r28	; 61
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	ff 90       	pop	r15
 29c:	ef 90       	pop	r14
 29e:	df 90       	pop	r13
 2a0:	cf 90       	pop	r12
 2a2:	bf 90       	pop	r11
 2a4:	af 90       	pop	r10
 2a6:	7f 90       	pop	r7
 2a8:	6f 90       	pop	r6
 2aa:	5f 90       	pop	r5
 2ac:	4f 90       	pop	r4
    else if(v_number_u32==0)
    {
        /* If the number is zero then Transmit Specified number of zeros*/
        /*TODO: trsnamit single zero or multiple, Currently single zero is transmitted*/
        // for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
        UART_TxChar(v_uartChannel_u8,'0');
 2ae:	51 cf       	rjmp	.-350    	; 0x152 <UART_TxChar>
    {
        for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
        {
            /* Continue extracting the digits from right side
               till the Specified v_numOfDigitsToTransmit_u8 */
            if(v_number_u32!=0)
 2b0:	41 15       	cp	r20, r1
 2b2:	51 05       	cpc	r21, r1
 2b4:	61 05       	cpc	r22, r1
 2b6:	71 05       	cpc	r23, r1
 2b8:	a9 f0       	breq	.+42     	; 0x2e4 <UART_TxNumber+0xe6>
                First get the remainder and divide the number by 10 each time.

                example for Decimal number:
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
 2ba:	14 2f       	mov	r17, r20
 2bc:	cb 01       	movw	r24, r22
 2be:	ba 01       	movw	r22, r20
 2c0:	a3 01       	movw	r20, r6
 2c2:	92 01       	movw	r18, r4
 2c4:	c4 d1       	rcall	.+904    	; 0x64e <__udivmodsi4>
 2c6:	ba 01       	movw	r22, r20
 2c8:	a9 01       	movw	r20, r18
 2ca:	a4 9e       	mul	r10, r20
 2cc:	10 19       	sub	r17, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	f7 01       	movw	r30, r14
 2d2:	10 83       	st	Z, r17
 2d4:	ff ef       	ldi	r31, 0xFF	; 255
 2d6:	ef 1a       	sub	r14, r31
 2d8:	ff 0a       	sbc	r15, r31
 2da:	1e 2d       	mov	r17, r14
 2dc:	1c 19       	sub	r17, r12
        // for(i=0;((i<v_numOfDigitsToTransmit_u8) && (i<C_MaxDigitsToTransmit_U8)) ;i++)
        UART_TxChar(v_uartChannel_u8,'0');
    }
    else
    {
        for(i=0;i<v_numOfDigitsToTransmit_u8;i++)
 2de:	10 17       	cp	r17, r16
 2e0:	38 f3       	brcs	.-50     	; 0x2b0 <UART_TxNumber+0xb2>
 2e2:	0f c0       	rjmp	.+30     	; 0x302 <UART_TxNumber+0x104>
                If v_number_u32 = 123 then extracted remainder will be 3 and number will be 12.
                The process continues till it becomes zero or max digits reached*/
                a[i]=util_GetMod32(v_number_u32,v_numericSystem_u8);
                v_number_u32=v_number_u32/v_numericSystem_u8;
            }
            else if( (v_numOfDigitsToTransmit_u8 == C_DefaultDigitsToTransmit_U8) ||
 2e4:	0b 30       	cpi	r16, 0x0B	; 11
 2e6:	68 f4       	brcc	.+26     	; 0x302 <UART_TxNumber+0x104>
            else
            {
                /*In case user expects more digits to be transmitted than the actual digits in number,
                  then update the remaining digits with zero.
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
 2e8:	f7 01       	movw	r30, r14
 2ea:	10 82       	st	Z, r1
 2ec:	f3 cf       	rjmp	.-26     	; 0x2d4 <UART_TxNumber+0xd6>
        }

        while(i)
        { 
            /* Finally get the ascii values of the digits and transmit*/
            UART_TxChar(v_uartChannel_u8,util_Hex2Ascii(a[i-1]));
 2ee:	fe 01       	movw	r30, r28
 2f0:	e1 0f       	add	r30, r17
 2f2:	f1 1d       	adc	r31, r1
 2f4:	60 81       	ld	r22, Z
 2f6:	6a 30       	cpi	r22, 0x0A	; 10
 2f8:	38 f0       	brcs	.+14     	; 0x308 <UART_TxNumber+0x10a>
 2fa:	69 5c       	subi	r22, 0xC9	; 201
 2fc:	8b 2d       	mov	r24, r11
 2fe:	29 df       	rcall	.-430    	; 0x152 <UART_TxChar>
            i--;
 300:	11 50       	subi	r17, 0x01	; 1
                Ex: v_number_u32 is 123 and user wants five digits then 00123 has to be transmitted */
                a[i]=0;
            }
        }

        while(i)
 302:	11 11       	cpse	r17, r1
 304:	f4 cf       	rjmp	.-24     	; 0x2ee <UART_TxNumber+0xf0>
 306:	02 c0       	rjmp	.+4      	; 0x30c <UART_TxNumber+0x10e>
        { 
            /* Finally get the ascii values of the digits and transmit*/
            UART_TxChar(v_uartChannel_u8,util_Hex2Ascii(a[i-1]));
 308:	60 5d       	subi	r22, 0xD0	; 208
 30a:	f8 cf       	rjmp	.-16     	; 0x2fc <UART_TxNumber+0xfe>
            i--;
        }
    }


}
 30c:	2a 96       	adiw	r28, 0x0a	; 10
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	f8 94       	cli
 312:	de bf       	out	0x3e, r29	; 62
 314:	0f be       	out	0x3f, r0	; 63
 316:	cd bf       	out	0x3d, r28	; 61
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	ff 90       	pop	r15
 322:	ef 90       	pop	r14
 324:	df 90       	pop	r13
 326:	cf 90       	pop	r12
 328:	bf 90       	pop	r11
 32a:	af 90       	pop	r10
 32c:	7f 90       	pop	r7
 32e:	6f 90       	pop	r6
 330:	5f 90       	pop	r5
 332:	4f 90       	pop	r4
 334:	08 95       	ret

00000336 <UART_Printf>:
        uint8_t v_Num_u8;
        UART_Printf("num1:%u",(uint16_t)v_Num_u8);       
 ***************************************************************************************************/
#if ( Enable_UART_Printf   == 1 ) 
void UART_Printf(uint8_t v_uartChannel_u8, const char *argList, ...)
{
 336:	af 92       	push	r10
 338:	bf 92       	push	r11
 33a:	cf 92       	push	r12
 33c:	df 92       	push	r13
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	00 d0       	rcall	.+0      	; 0x34c <UART_Printf+0x16>
 34c:	00 d0       	rcall	.+0      	; 0x34e <UART_Printf+0x18>
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	19 89       	ldd	r17, Y+17	; 0x11
 354:	aa 88       	ldd	r10, Y+18	; 0x12
 356:	bb 88       	ldd	r11, Y+19	; 0x13
#if (Enable_UART_TxFloatNumber==1)
    double v_floatNum_f32;
#endif  


    va_start(argp, argList);
 358:	7e 01       	movw	r14, r28
 35a:	84 e1       	ldi	r24, 0x14	; 20
 35c:	e8 0e       	add	r14, r24
 35e:	f1 1c       	adc	r15, r1

    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
 360:	f5 01       	movw	r30, r10
 362:	60 81       	ld	r22, Z
 364:	66 23       	and	r22, r22
 366:	09 f4       	brne	.+2      	; 0x36a <UART_Printf+0x34>
 368:	1a c1       	rjmp	.+564    	; 0x59e <UART_Printf+0x268>
    {

        ch= *ptr;
        if(ch == '%')         /*Check for '%' as there will be format specifier after it */
 36a:	65 32       	cpi	r22, 0x25	; 37
 36c:	09 f0       	breq	.+2      	; 0x370 <UART_Printf+0x3a>
 36e:	ff c0       	rjmp	.+510    	; 0x56e <UART_Printf+0x238>
        {
            ptr++;
 370:	65 01       	movw	r12, r10
 372:	9f ef       	ldi	r25, 0xFF	; 255
 374:	c9 1a       	sub	r12, r25
 376:	d9 0a       	sbc	r13, r25
            ch = *ptr;
 378:	f5 01       	movw	r30, r10
 37a:	91 81       	ldd	r25, Z+1	; 0x01
            if((ch>=0x30) && (ch<=0x39))
 37c:	80 ed       	ldi	r24, 0xD0	; 208
 37e:	89 0f       	add	r24, r25
 380:	8a 30       	cpi	r24, 0x0A	; 10
 382:	08 f0       	brcs	.+2      	; 0x386 <UART_Printf+0x50>
 384:	af c0       	rjmp	.+350    	; 0x4e4 <UART_Printf+0x1ae>
 386:	00 e0       	ldi	r16, 0x00	; 0
            {
                v_numOfDigitsToTransmit_u8 = 0;
                while((ch>=0x30) && (ch<=0x39))
 388:	80 ed       	ldi	r24, 0xD0	; 208
 38a:	89 0f       	add	r24, r25
 38c:	8a 30       	cpi	r24, 0x0A	; 10
 38e:	58 f4       	brcc	.+22     	; 0x3a6 <UART_Printf+0x70>
                {
                    v_numOfDigitsToTransmit_u8 = (v_numOfDigitsToTransmit_u8 * 10) + (ch-0x30);
 390:	fa e0       	ldi	r31, 0x0A	; 10
 392:	0f 9f       	mul	r16, r31
 394:	80 0d       	add	r24, r0
 396:	11 24       	eor	r1, r1
 398:	08 2f       	mov	r16, r24
                    ptr++;
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	c8 1a       	sub	r12, r24
 39e:	d8 0a       	sbc	r13, r24
                    ch = *ptr;
 3a0:	f6 01       	movw	r30, r12
 3a2:	90 81       	ld	r25, Z
 3a4:	f1 cf       	rjmp	.-30     	; 0x388 <UART_Printf+0x52>
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
            }               


            switch(ch)       /* Decode the type of the argument */
 3a6:	98 35       	cpi	r25, 0x58	; 88
 3a8:	09 f4       	brne	.+2      	; 0x3ac <UART_Printf+0x76>
 3aa:	a0 c0       	rjmp	.+320    	; 0x4ec <UART_Printf+0x1b6>
 3ac:	a0 f4       	brcc	.+40     	; 0x3d6 <UART_Printf+0xa0>
 3ae:	93 34       	cpi	r25, 0x43	; 67
 3b0:	29 f1       	breq	.+74     	; 0x3fc <UART_Printf+0xc6>
 3b2:	38 f4       	brcc	.+14     	; 0x3c2 <UART_Printf+0x8c>
 3b4:	95 32       	cpi	r25, 0x25	; 37
 3b6:	09 f4       	brne	.+2      	; 0x3ba <UART_Printf+0x84>
 3b8:	d6 c0       	rjmp	.+428    	; 0x566 <UART_Printf+0x230>
 3ba:	92 34       	cpi	r25, 0x42	; 66
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <UART_Printf+0x8a>
 3be:	b4 c0       	rjmp	.+360    	; 0x528 <UART_Printf+0x1f2>
 3c0:	d9 c0       	rjmp	.+434    	; 0x574 <UART_Printf+0x23e>
 3c2:	93 35       	cpi	r25, 0x53	; 83
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <UART_Printf+0x92>
 3c6:	c2 c0       	rjmp	.+388    	; 0x54c <UART_Printf+0x216>
 3c8:	95 35       	cpi	r25, 0x55	; 85
 3ca:	09 f4       	brne	.+2      	; 0x3ce <UART_Printf+0x98>
 3cc:	72 c0       	rjmp	.+228    	; 0x4b2 <UART_Printf+0x17c>
 3ce:	94 34       	cpi	r25, 0x44	; 68
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <UART_Printf+0x9e>
 3d2:	d0 c0       	rjmp	.+416    	; 0x574 <UART_Printf+0x23e>
 3d4:	37 c0       	rjmp	.+110    	; 0x444 <UART_Printf+0x10e>
 3d6:	94 36       	cpi	r25, 0x64	; 100
 3d8:	e9 f0       	breq	.+58     	; 0x414 <UART_Printf+0xde>
 3da:	20 f4       	brcc	.+8      	; 0x3e4 <UART_Printf+0xae>
 3dc:	92 36       	cpi	r25, 0x62	; 98
 3de:	09 f4       	brne	.+2      	; 0x3e2 <UART_Printf+0xac>
 3e0:	96 c0       	rjmp	.+300    	; 0x50e <UART_Printf+0x1d8>
 3e2:	d9 c0       	rjmp	.+434    	; 0x596 <UART_Printf+0x260>
 3e4:	95 37       	cpi	r25, 0x75	; 117
 3e6:	09 f4       	brne	.+2      	; 0x3ea <UART_Printf+0xb4>
 3e8:	51 c0       	rjmp	.+162    	; 0x48c <UART_Printf+0x156>
 3ea:	98 37       	cpi	r25, 0x78	; 120
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <UART_Printf+0xba>
 3ee:	70 c0       	rjmp	.+224    	; 0x4d0 <UART_Printf+0x19a>
 3f0:	ab c0       	rjmp	.+342    	; 0x548 <UART_Printf+0x212>
 3f2:	99 35       	cpi	r25, 0x59	; 89
 3f4:	60 f4       	brcc	.+24     	; 0x40e <UART_Printf+0xd8>
 3f6:	93 34       	cpi	r25, 0x43	; 67
 3f8:	09 f0       	breq	.+2      	; 0x3fc <UART_Printf+0xc6>
 3fa:	52 c0       	rjmp	.+164    	; 0x4a0 <UART_Printf+0x16a>
            {
            case 'C':
            case 'c':     /* Argument type is of char, hence read char data from the argp */
                ch = va_arg(argp, int);
 3fc:	57 01       	movw	r10, r14
 3fe:	f2 e0       	ldi	r31, 0x02	; 2
 400:	af 0e       	add	r10, r31
 402:	b1 1c       	adc	r11, r1
                UART_TxChar(v_uartChannel_u8,ch);
 404:	f7 01       	movw	r30, r14
 406:	60 81       	ld	r22, Z
 408:	81 2f       	mov	r24, r17
 40a:	a3 de       	rcall	.-698    	; 0x152 <UART_TxChar>
 40c:	a8 c0       	rjmp	.+336    	; 0x55e <UART_Printf+0x228>
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
            }               


            switch(ch)       /* Decode the type of the argument */
 40e:	94 36       	cpi	r25, 0x64	; 100
 410:	b9 f5       	brne	.+110    	; 0x480 <UART_Printf+0x14a>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 412:	0f ef       	ldi	r16, 0xFF	; 255
                ch = va_arg(argp, int);
                UART_TxChar(v_uartChannel_u8,ch);
                break;

            case 'd':    /* Argument type is of signed integer, hence read 16bit data from the argp */
                v_num_s16 = va_arg(argp, sint16_t);
 414:	57 01       	movw	r10, r14
 416:	f2 e0       	ldi	r31, 0x02	; 2
 418:	af 0e       	add	r10, r31
 41a:	b1 1c       	adc	r11, r1
 41c:	f7 01       	movw	r30, r14
 41e:	e0 80       	ld	r14, Z
 420:	f1 80       	ldd	r15, Z+1	; 0x01
#if (Enable_UART_TxNumber == 1)
                if(v_num_s16<0)
 422:	f7 fe       	sbrs	r15, 7
 424:	06 c0       	rjmp	.+12     	; 0x432 <UART_Printf+0xfc>
                { /* If the number is -ve then display the 2's complement along with '-' sign */ 
                    v_num_s16 = -v_num_s16;
 426:	f1 94       	neg	r15
 428:	e1 94       	neg	r14
 42a:	f1 08       	sbc	r15, r1
                    UART_TxChar(v_uartChannel_u8,'-');
 42c:	6d e2       	ldi	r22, 0x2D	; 45
 42e:	81 2f       	mov	r24, r17
 430:	90 de       	rcall	.-736    	; 0x152 <UART_TxChar>
                }
                UART_TxNumber(v_uartChannel_u8,C_DECIMAL_U8,v_num_s16,v_numOfDigitsToTransmit_u8);
 432:	97 01       	movw	r18, r14
 434:	ff 0c       	add	r15, r15
 436:	44 0b       	sbc	r20, r20
 438:	55 0b       	sbc	r21, r21
 43a:	44 c0       	rjmp	.+136    	; 0x4c4 <UART_Printf+0x18e>
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
            }               


            switch(ch)       /* Decode the type of the argument */
 43c:	94 34       	cpi	r25, 0x44	; 68
 43e:	09 f0       	breq	.+2      	; 0x442 <UART_Printf+0x10c>
 440:	99 c0       	rjmp	.+306    	; 0x574 <UART_Printf+0x23e>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 442:	0f ef       	ldi	r16, 0xFF	; 255
                UART_TxNumber(v_uartChannel_u8,C_DECIMAL_U8,v_num_s16,v_numOfDigitsToTransmit_u8);
#endif
                break;

            case 'D':    /* Argument type is of integer, hence read 16bit data from the argp */
                v_num_s32 = va_arg(argp, sint32_t);             
 444:	57 01       	movw	r10, r14
 446:	f4 e0       	ldi	r31, 0x04	; 4
 448:	af 0e       	add	r10, r31
 44a:	b1 1c       	adc	r11, r1
 44c:	f7 01       	movw	r30, r14
 44e:	20 81       	ld	r18, Z
 450:	31 81       	ldd	r19, Z+1	; 0x01
 452:	42 81       	ldd	r20, Z+2	; 0x02
 454:	53 81       	ldd	r21, Z+3	; 0x03
#if (Enable_UART_TxNumber == 1)                
                if(v_num_s32<0)
 456:	57 ff       	sbrs	r21, 7
 458:	35 c0       	rjmp	.+106    	; 0x4c4 <UART_Printf+0x18e>
                { /* If the number is -ve then display the 2's complement along with '-' sign */
                    v_num_s32 = -v_num_s32;
 45a:	50 95       	com	r21
 45c:	40 95       	com	r20
 45e:	30 95       	com	r19
 460:	21 95       	neg	r18
 462:	3f 4f       	sbci	r19, 0xFF	; 255
 464:	4f 4f       	sbci	r20, 0xFF	; 255
 466:	5f 4f       	sbci	r21, 0xFF	; 255
                    UART_TxChar(v_uartChannel_u8,'-');
 468:	6d e2       	ldi	r22, 0x2D	; 45
 46a:	81 2f       	mov	r24, r17
 46c:	29 83       	std	Y+1, r18	; 0x01
 46e:	3a 83       	std	Y+2, r19	; 0x02
 470:	4b 83       	std	Y+3, r20	; 0x03
 472:	5c 83       	std	Y+4, r21	; 0x04
 474:	6e de       	rcall	.-804    	; 0x152 <UART_TxChar>
 476:	5c 81       	ldd	r21, Y+4	; 0x04
 478:	4b 81       	ldd	r20, Y+3	; 0x03
 47a:	3a 81       	ldd	r19, Y+2	; 0x02
 47c:	29 81       	ldd	r18, Y+1	; 0x01
 47e:	22 c0       	rjmp	.+68     	; 0x4c4 <UART_Printf+0x18e>
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
            }               


            switch(ch)       /* Decode the type of the argument */
 480:	95 36       	cpi	r25, 0x65	; 101
 482:	08 f4       	brcc	.+2      	; 0x486 <UART_Printf+0x150>
 484:	40 c0       	rjmp	.+128    	; 0x506 <UART_Printf+0x1d0>
 486:	95 37       	cpi	r25, 0x75	; 117
 488:	f9 f4       	brne	.+62     	; 0x4c8 <UART_Printf+0x192>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 48a:	0f ef       	ldi	r16, 0xFF	; 255
                UART_TxNumber(v_uartChannel_u8,C_DECIMAL_U8,v_num_s32,v_numOfDigitsToTransmit_u8);
#endif                
                break;    

            case 'u':    /* Argument type is of unsigned integer, hence read 16bit unsigned data */
                v_num_u16 = va_arg(argp, uint16_t);         
 48c:	57 01       	movw	r10, r14
 48e:	f2 e0       	ldi	r31, 0x02	; 2
 490:	af 0e       	add	r10, r31
 492:	b1 1c       	adc	r11, r1
#if (Enable_UART_TxNumber == 1)                
                UART_TxNumber(v_uartChannel_u8,C_DECIMAL_U8,v_num_u16,v_numOfDigitsToTransmit_u8);
 494:	f7 01       	movw	r30, r14
 496:	20 81       	ld	r18, Z
 498:	31 81       	ldd	r19, Z+1	; 0x01
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	12 c0       	rjmp	.+36     	; 0x4c4 <UART_Printf+0x18e>
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
            }               


            switch(ch)       /* Decode the type of the argument */
 4a0:	94 34       	cpi	r25, 0x44	; 68
 4a2:	08 f4       	brcc	.+2      	; 0x4a6 <UART_Printf+0x170>
 4a4:	5e c0       	rjmp	.+188    	; 0x562 <UART_Printf+0x22c>
 4a6:	93 35       	cpi	r25, 0x53	; 83
 4a8:	09 f4       	brne	.+2      	; 0x4ac <UART_Printf+0x176>
 4aa:	50 c0       	rjmp	.+160    	; 0x54c <UART_Printf+0x216>
 4ac:	95 35       	cpi	r25, 0x55	; 85
 4ae:	31 f6       	brne	.-116    	; 0x43c <UART_Printf+0x106>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 4b0:	0f ef       	ldi	r16, 0xFF	; 255
                UART_TxNumber(v_uartChannel_u8,C_DECIMAL_U8,v_num_u16,v_numOfDigitsToTransmit_u8);
#endif                
                break;

            case 'U':    /* Argument type is of integer, hence read 32bit unsigend data */
                v_num_u32 = va_arg(argp, uint32_t);         
 4b2:	57 01       	movw	r10, r14
 4b4:	f4 e0       	ldi	r31, 0x04	; 4
 4b6:	af 0e       	add	r10, r31
 4b8:	b1 1c       	adc	r11, r1
#if (Enable_UART_TxNumber == 1)                
                UART_TxNumber(v_uartChannel_u8,C_DECIMAL_U8,v_num_u32,v_numOfDigitsToTransmit_u8);
 4ba:	f7 01       	movw	r30, r14
 4bc:	20 81       	ld	r18, Z
 4be:	31 81       	ldd	r19, Z+1	; 0x01
 4c0:	42 81       	ldd	r20, Z+2	; 0x02
 4c2:	53 81       	ldd	r21, Z+3	; 0x03
 4c4:	6a e0       	ldi	r22, 0x0A	; 10
 4c6:	1c c0       	rjmp	.+56     	; 0x500 <UART_Printf+0x1ca>
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
            }               


            switch(ch)       /* Decode the type of the argument */
 4c8:	98 37       	cpi	r25, 0x78	; 120
 4ca:	09 f0       	breq	.+2      	; 0x4ce <UART_Printf+0x198>
 4cc:	3d c0       	rjmp	.+122    	; 0x548 <UART_Printf+0x212>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 4ce:	0f ef       	ldi	r16, 0xFF	; 255
                UART_TxNumber(v_uartChannel_u8,C_DECIMAL_U8,v_num_u32,v_numOfDigitsToTransmit_u8);
#endif                
                break;            

            case 'x':  /* Argument type is of hex, hence hexadecimal data from the argp */
                v_num_u16 = va_arg(argp, uint16_t);             
 4d0:	57 01       	movw	r10, r14
 4d2:	f2 e0       	ldi	r31, 0x02	; 2
 4d4:	af 0e       	add	r10, r31
 4d6:	b1 1c       	adc	r11, r1
#if (Enable_UART_TxNumber == 1)                
                UART_TxNumber(v_uartChannel_u8,C_HEX_U8, v_num_u16,v_numOfDigitsToTransmit_u8);
 4d8:	f7 01       	movw	r30, r14
 4da:	20 81       	ld	r18, Z
 4dc:	31 81       	ldd	r19, Z+1	; 0x01
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	50 e0       	ldi	r21, 0x00	; 0
 4e2:	0d c0       	rjmp	.+26     	; 0x4fe <UART_Printf+0x1c8>
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
            }               


            switch(ch)       /* Decode the type of the argument */
 4e4:	98 35       	cpi	r25, 0x58	; 88
 4e6:	09 f0       	breq	.+2      	; 0x4ea <UART_Printf+0x1b4>
 4e8:	84 cf       	rjmp	.-248    	; 0x3f2 <UART_Printf+0xbc>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 4ea:	0f ef       	ldi	r16, 0xFF	; 255
                UART_TxNumber(v_uartChannel_u8,C_HEX_U8, v_num_u16,v_numOfDigitsToTransmit_u8);
#endif                
                break;

            case 'X':  /* Argument type is of hex, hence hexadecimal data from the argp */
                v_num_u32 = va_arg(argp, uint32_t);                     
 4ec:	57 01       	movw	r10, r14
 4ee:	f4 e0       	ldi	r31, 0x04	; 4
 4f0:	af 0e       	add	r10, r31
 4f2:	b1 1c       	adc	r11, r1
#if (Enable_UART_TxNumber == 1)                        
                UART_TxNumber(v_uartChannel_u8,C_HEX_U8, v_num_u32,v_numOfDigitsToTransmit_u8);
 4f4:	f7 01       	movw	r30, r14
 4f6:	20 81       	ld	r18, Z
 4f8:	31 81       	ldd	r19, Z+1	; 0x01
 4fa:	42 81       	ldd	r20, Z+2	; 0x02
 4fc:	53 81       	ldd	r21, Z+3	; 0x03
 4fe:	60 e1       	ldi	r22, 0x10	; 16
 500:	81 2f       	mov	r24, r17
 502:	7d de       	rcall	.-774    	; 0x1fe <UART_TxNumber>
 504:	2c c0       	rjmp	.+88     	; 0x55e <UART_Printf+0x228>
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
            }               


            switch(ch)       /* Decode the type of the argument */
 506:	92 36       	cpi	r25, 0x62	; 98
 508:	09 f0       	breq	.+2      	; 0x50c <UART_Printf+0x1d6>
 50a:	45 c0       	rjmp	.+138    	; 0x596 <UART_Printf+0x260>
                    ch = *ptr;
                }
            }
            else
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
 50c:	0f ef       	ldi	r16, 0xFF	; 255
#endif                
                break;


            case 'b':  /* Argument type is of binary,Read int and convert to binary */
                v_num_u16 = va_arg(argp, uint16_t);     
 50e:	57 01       	movw	r10, r14
 510:	f2 e0       	ldi	r31, 0x02	; 2
 512:	af 0e       	add	r10, r31
 514:	b1 1c       	adc	r11, r1
 516:	f7 01       	movw	r30, r14
 518:	40 81       	ld	r20, Z
 51a:	51 81       	ldd	r21, Z+1	; 0x01
#if (Enable_UART_TxNumber == 1)                        
                if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 51c:	0f 3f       	cpi	r16, 0xFF	; 255
 51e:	09 f4       	brne	.+2      	; 0x522 <UART_Printf+0x1ec>
                {
                    v_numOfDigitsToTransmit_u8 = 16;
 520:	00 e1       	ldi	r16, 0x10	; 16
                }
                UART_TxNumber(v_uartChannel_u8,C_BINARY_U8, v_num_u16,v_numOfDigitsToTransmit_u8);
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	0c c0       	rjmp	.+24     	; 0x540 <UART_Printf+0x20a>
#endif                
                break;

            case 'B':  /* Argument type is of binary,Read int and convert to binary */
                v_num_u32 = va_arg(argp, uint32_t);         
 528:	57 01       	movw	r10, r14
 52a:	f4 e0       	ldi	r31, 0x04	; 4
 52c:	af 0e       	add	r10, r31
 52e:	b1 1c       	adc	r11, r1
 530:	f7 01       	movw	r30, r14
 532:	40 81       	ld	r20, Z
 534:	51 81       	ldd	r21, Z+1	; 0x01
 536:	62 81       	ldd	r22, Z+2	; 0x02
 538:	73 81       	ldd	r23, Z+3	; 0x03
#if (Enable_UART_TxNumber == 1)                
                if(v_numOfDigitsToTransmit_u8 == C_MaxDigitsToTransmitUsingPrintf_U8)
 53a:	0f 3f       	cpi	r16, 0xFF	; 255
 53c:	09 f4       	brne	.+2      	; 0x540 <UART_Printf+0x20a>
                    v_numOfDigitsToTransmit_u8 = 16;                
 53e:	00 e1       	ldi	r16, 0x10	; 16
 540:	20 2f       	mov	r18, r16
 542:	81 2f       	mov	r24, r17
 544:	15 de       	rcall	.-982    	; 0x170 <UART_TxNumber.part.2>
 546:	0b c0       	rjmp	.+22     	; 0x55e <UART_Printf+0x228>
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
            }               


            switch(ch)       /* Decode the type of the argument */
 548:	93 37       	cpi	r25, 0x73	; 115
 54a:	a1 f4       	brne	.+40     	; 0x574 <UART_Printf+0x23e>
                break;                


            case 'S':
            case 's': /* Argument type is of string, hence get the pointer to sting passed */
                str = va_arg(argp, char *);
 54c:	57 01       	movw	r10, r14
 54e:	f2 e0       	ldi	r31, 0x02	; 2
 550:	af 0e       	add	r10, r31
 552:	b1 1c       	adc	r11, r1
                UART_TxString(v_uartChannel_u8,str);                
 554:	f7 01       	movw	r30, r14
 556:	60 81       	ld	r22, Z
 558:	71 81       	ldd	r23, Z+1	; 0x01
 55a:	81 2f       	mov	r24, r17
 55c:	41 de       	rcall	.-894    	; 0x1e0 <UART_TxString>
                break;                


            case 'S':
            case 's': /* Argument type is of string, hence get the pointer to sting passed */
                str = va_arg(argp, char *);
 55e:	75 01       	movw	r14, r10
                UART_TxString(v_uartChannel_u8,str);                
                break;
 560:	09 c0       	rjmp	.+18     	; 0x574 <UART_Printf+0x23e>
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
            }               


            switch(ch)       /* Decode the type of the argument */
 562:	95 32       	cpi	r25, 0x25	; 37
 564:	61 f4       	brne	.+24     	; 0x57e <UART_Printf+0x248>
                str = va_arg(argp, char *);
                UART_TxString(v_uartChannel_u8,str);                
                break;

            case '%':
                UART_TxChar(v_uartChannel_u8,'%');
 566:	65 e2       	ldi	r22, 0x25	; 37
 568:	81 2f       	mov	r24, r17
 56a:	f3 dd       	rcall	.-1050   	; 0x152 <UART_TxChar>
                break;
 56c:	03 c0       	rjmp	.+6      	; 0x574 <UART_Printf+0x23e>
            }
        }
        else
        {
            /* As '%' is not detected transmit the char passed */
            UART_TxChar(v_uartChannel_u8,ch);
 56e:	81 2f       	mov	r24, r17
 570:	f0 dd       	rcall	.-1056   	; 0x152 <UART_TxChar>
 572:	65 01       	movw	r12, r10


    va_start(argp, argList);

    /* Loop through the list to extract all the input arguments */
    for(ptr = argList; *ptr != '\0'; ptr++)
 574:	56 01       	movw	r10, r12
 576:	ff ef       	ldi	r31, 0xFF	; 255
 578:	af 1a       	sub	r10, r31
 57a:	bf 0a       	sbc	r11, r31
 57c:	f1 ce       	rjmp	.-542    	; 0x360 <UART_Printf+0x2a>
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
            }               


            switch(ch)       /* Decode the type of the argument */
 57e:	92 34       	cpi	r25, 0x42	; 66
 580:	c9 f7       	brne	.-14     	; 0x574 <UART_Printf+0x23e>
                UART_TxNumber(v_uartChannel_u8,C_BINARY_U8, v_num_u16,v_numOfDigitsToTransmit_u8);
#endif                
                break;

            case 'B':  /* Argument type is of binary,Read int and convert to binary */
                v_num_u32 = va_arg(argp, uint32_t);         
 582:	57 01       	movw	r10, r14
 584:	f4 e0       	ldi	r31, 0x04	; 4
 586:	af 0e       	add	r10, r31
 588:	b1 1c       	adc	r11, r1
 58a:	f7 01       	movw	r30, r14
 58c:	40 81       	ld	r20, Z
 58e:	51 81       	ldd	r21, Z+1	; 0x01
 590:	62 81       	ldd	r22, Z+2	; 0x02
 592:	73 81       	ldd	r23, Z+3	; 0x03
 594:	d4 cf       	rjmp	.-88     	; 0x53e <UART_Printf+0x208>
            {
                v_numOfDigitsToTransmit_u8 = C_MaxDigitsToTransmitUsingPrintf_U8;
            }               


            switch(ch)       /* Decode the type of the argument */
 596:	93 36       	cpi	r25, 0x63	; 99
 598:	09 f4       	brne	.+2      	; 0x59c <UART_Printf+0x266>
 59a:	30 cf       	rjmp	.-416    	; 0x3fc <UART_Printf+0xc6>
 59c:	eb cf       	rjmp	.-42     	; 0x574 <UART_Printf+0x23e>
            UART_TxChar(v_uartChannel_u8,ch);
        }
    }

    va_end(argp);
}
 59e:	0f 90       	pop	r0
 5a0:	0f 90       	pop	r0
 5a2:	0f 90       	pop	r0
 5a4:	0f 90       	pop	r0
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	1f 91       	pop	r17
 5ac:	0f 91       	pop	r16
 5ae:	ff 90       	pop	r15
 5b0:	ef 90       	pop	r14
 5b2:	df 90       	pop	r13
 5b4:	cf 90       	pop	r12
 5b6:	bf 90       	pop	r11
 5b8:	af 90       	pop	r10
 5ba:	08 95       	ret

000005bc <main>:

int main()
{


	UART_Init(0,9600);   // Initilaize All the UARTs at 9600 Baud rate
 5bc:	40 e8       	ldi	r20, 0x80	; 128
 5be:	55 e2       	ldi	r21, 0x25	; 37
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	ae dd       	rcall	.-1188   	; 0x124 <UART_Init>
	UART1_Init(9600);   // Both UART_Init(0,9600) and UART0_Init(9600) are same
 5c8:	40 e8       	ldi	r20, 0x80	; 128
 5ca:	55 e2       	ldi	r21, 0x25	; 37
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	a8 dd       	rcall	.-1200   	; 0x124 <UART_Init>
	// Internally UART0_Init() is mapped to UART_Init()
	// You can notice First two(0,1) are called with parameter other two(2,3) with suffix

	/*Directly use the Channel suffixed interface UART0_Printf, where suffix "0" specifies the UART channel*/
	UART0_Printf("Channel Zero %4d,  %2x\n\r", 1234, 0xabcd);
 5d4:	8b ea       	ldi	r24, 0xAB	; 171
 5d6:	88 2e       	mov	r8, r24
 5d8:	8f 92       	push	r8
 5da:	9d ec       	ldi	r25, 0xCD	; 205
 5dc:	99 2e       	mov	r9, r25
 5de:	9f 92       	push	r9
 5e0:	24 e0       	ldi	r18, 0x04	; 4
 5e2:	a2 2e       	mov	r10, r18
 5e4:	af 92       	push	r10
 5e6:	32 ed       	ldi	r19, 0xD2	; 210
 5e8:	b3 2e       	mov	r11, r19
 5ea:	bf 92       	push	r11
 5ec:	00 e0       	ldi	r16, 0x00	; 0
 5ee:	11 e0       	ldi	r17, 0x01	; 1
 5f0:	1f 93       	push	r17
 5f2:	0f 93       	push	r16
 5f4:	1f 92       	push	r1
 5f6:	9f de       	rcall	.-706    	; 0x336 <UART_Printf>
	UART1_Printf("Channel One %4d,   %2x\n\r", 5678, 0xef);
 5f8:	1f 92       	push	r1
 5fa:	4f ee       	ldi	r20, 0xEF	; 239
 5fc:	c4 2e       	mov	r12, r20
 5fe:	cf 92       	push	r12
 600:	56 e1       	ldi	r21, 0x16	; 22
 602:	d5 2e       	mov	r13, r21
 604:	df 92       	push	r13
 606:	6e e2       	ldi	r22, 0x2E	; 46
 608:	e6 2e       	mov	r14, r22
 60a:	ef 92       	push	r14
 60c:	c9 e1       	ldi	r28, 0x19	; 25
 60e:	d1 e0       	ldi	r29, 0x01	; 1
 610:	df 93       	push	r29
 612:	cf 93       	push	r28
 614:	ff 24       	eor	r15, r15
 616:	f3 94       	inc	r15
 618:	ff 92       	push	r15
 61a:	8d de       	rcall	.-742    	; 0x336 <UART_Printf>



	/*Use the standard interface by passing the channel number as first paramater*/
	UART_Printf(0,"Channel Zero %4d,  %2x\n\r", 1234, 0xabcd);
 61c:	8f 92       	push	r8
 61e:	9f 92       	push	r9
 620:	af 92       	push	r10
 622:	bf 92       	push	r11
 624:	1f 93       	push	r17
 626:	0f 93       	push	r16
 628:	1f 92       	push	r1
 62a:	85 de       	rcall	.-758    	; 0x336 <UART_Printf>
	UART_Printf(1,"Channel One %4d,   %2x\n\r", 5678, 0xef);
 62c:	1f 92       	push	r1
 62e:	cf 92       	push	r12
 630:	df 92       	push	r13
 632:	ef 92       	push	r14
 634:	df 93       	push	r29
 636:	cf 93       	push	r28
 638:	ff 92       	push	r15
 63a:	7d de       	rcall	.-774    	; 0x336 <UART_Printf>
 63c:	8d b7       	in	r24, 0x3d	; 61
 63e:	9e b7       	in	r25, 0x3e	; 62
 640:	4c 96       	adiw	r24, 0x1c	; 28
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	f8 94       	cli
 646:	9e bf       	out	0x3e, r25	; 62
 648:	0f be       	out	0x3f, r0	; 63
 64a:	8d bf       	out	0x3d, r24	; 61

	while(1);
 64c:	ff cf       	rjmp	.-2      	; 0x64c <main+0x90>

0000064e <__udivmodsi4>:
 64e:	a1 e2       	ldi	r26, 0x21	; 33
 650:	1a 2e       	mov	r1, r26
 652:	aa 1b       	sub	r26, r26
 654:	bb 1b       	sub	r27, r27
 656:	fd 01       	movw	r30, r26
 658:	0d c0       	rjmp	.+26     	; 0x674 <__udivmodsi4_ep>

0000065a <__udivmodsi4_loop>:
 65a:	aa 1f       	adc	r26, r26
 65c:	bb 1f       	adc	r27, r27
 65e:	ee 1f       	adc	r30, r30
 660:	ff 1f       	adc	r31, r31
 662:	a2 17       	cp	r26, r18
 664:	b3 07       	cpc	r27, r19
 666:	e4 07       	cpc	r30, r20
 668:	f5 07       	cpc	r31, r21
 66a:	20 f0       	brcs	.+8      	; 0x674 <__udivmodsi4_ep>
 66c:	a2 1b       	sub	r26, r18
 66e:	b3 0b       	sbc	r27, r19
 670:	e4 0b       	sbc	r30, r20
 672:	f5 0b       	sbc	r31, r21

00000674 <__udivmodsi4_ep>:
 674:	66 1f       	adc	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	88 1f       	adc	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	1a 94       	dec	r1
 67e:	69 f7       	brne	.-38     	; 0x65a <__udivmodsi4_loop>
 680:	60 95       	com	r22
 682:	70 95       	com	r23
 684:	80 95       	com	r24
 686:	90 95       	com	r25
 688:	9b 01       	movw	r18, r22
 68a:	ac 01       	movw	r20, r24
 68c:	bd 01       	movw	r22, r26
 68e:	cf 01       	movw	r24, r30
 690:	08 95       	ret

00000692 <__mulshisi3>:
 692:	b7 ff       	sbrs	r27, 7
 694:	04 c0       	rjmp	.+8      	; 0x69e <__muluhisi3>

00000696 <__mulohisi3>:
 696:	03 d0       	rcall	.+6      	; 0x69e <__muluhisi3>
 698:	82 1b       	sub	r24, r18
 69a:	93 0b       	sbc	r25, r19
 69c:	08 95       	ret

0000069e <__muluhisi3>:
 69e:	09 d0       	rcall	.+18     	; 0x6b2 <__umulhisi3>
 6a0:	a5 9f       	mul	r26, r21
 6a2:	90 0d       	add	r25, r0
 6a4:	b4 9f       	mul	r27, r20
 6a6:	90 0d       	add	r25, r0
 6a8:	a4 9f       	mul	r26, r20
 6aa:	80 0d       	add	r24, r0
 6ac:	91 1d       	adc	r25, r1
 6ae:	11 24       	eor	r1, r1
 6b0:	08 95       	ret

000006b2 <__umulhisi3>:
 6b2:	a2 9f       	mul	r26, r18
 6b4:	b0 01       	movw	r22, r0
 6b6:	b3 9f       	mul	r27, r19
 6b8:	c0 01       	movw	r24, r0
 6ba:	a3 9f       	mul	r26, r19
 6bc:	70 0d       	add	r23, r0
 6be:	81 1d       	adc	r24, r1
 6c0:	11 24       	eor	r1, r1
 6c2:	91 1d       	adc	r25, r1
 6c4:	b2 9f       	mul	r27, r18
 6c6:	70 0d       	add	r23, r0
 6c8:	81 1d       	adc	r24, r1
 6ca:	11 24       	eor	r1, r1
 6cc:	91 1d       	adc	r25, r1
 6ce:	08 95       	ret

000006d0 <_exit>:
 6d0:	f8 94       	cli

000006d2 <__stop_program>:
 6d2:	ff cf       	rjmp	.-2      	; 0x6d2 <__stop_program>
